Gson　

fromJson() :实现反序列化
toJson() : 实现序列化

基本数据类型生成
Gson　gson = new Gson();
String jsonNumber = gson.toJson(100);
String jsonBoolean = gson.toJson(false);
String jsonString = gson.toJson("String");

对于普通Ｊａｖａ类
public class User{
	public String name;
	public int age;
}

生成JSON
Gson gson = new Gson();
User user = new User("Sunny", 24);
String jsonObject = gson.toJson(user); //{"name":"Sunny", "age":24}

解析JSON
Gson gson = new Gson();
String jsonString = "{\"name\":\"Sunny\", \"age\":24}";
User user = gson.fromJson(jsonString, User.class);
//解析对象　参数对应解析类

泛型
数组
String[] strings = gson.fromJson(jsonArray, String[].class);

List
Gson 提供TypeToken来实现对泛型的支持，　TypeToken帮助我们捕获像List这样的泛型信息，
Java编译器会把捕获到的泛型信息编译到这个匿名内部类里，　然后运行时就可以被getType（）方法用反射API提取到, 也就是转成.class
List<String> stringList = gson.fromJson(jsonArray, new TypeToken<List<String>>(){}.getType())

注解

@Expose　注解：　区分实体中不想被序列化的属性
@SerializeName　注解：定义属性序列化后的名称


Gson解析复杂JSON数据
1,JsonParse 解析类  getAsJsonObject 和getAsJsonArray
2,JsonElement 抽象类，代表JSON串中的某一个元素


泛型类
	List Set Map

public class Gengeric<T>{ //T E K V 表示泛型
	private T key; //类型由T决定

}


注解

自定义注解
元注解
@Target({ElementType.METHOD,ElementType.TYPE})　
//注解作用域，　
//METHOD-方法声明, CONSTRUCTOR-构造方法声明, FIELD-字段声明, LOCAL_VARIABLE-局部变量声明, PACKAGE－包声明，　PARAMETER-参数声明, TYPE-类接口

@Retention(RetentionPolicy.RUNTIME)
//生命周期
//RUNTIME－运行时存在，　可以通过反射读取，　SOURCE- 源码显示，编译时丢失，　CLASS-编译记录到class中，　运行时忽略

@Inherited　
//标识性的元注解，　允许子注解继承它

@Documented　
//生成javadoc时包含注解

public @interface Description {
    String desc(); //非方法　只是一个成员变量
    String author();
    int age() default 18; //成员变量可以用default指定默认值
}

１，成员类型受限制，　合法的类型包括基本数据类型，String Class　Annotation Enumeration
２，如果注解只有一个成员，　则成员取名为value()，　使用时可以忽略成员名和赋值号
３，注解类可以没有成员，没有成员的注解称为标识注解

使用自定义注解：
@<注解名>(<成员名１>＝<成员值１>，　<成员名２>＝<成员值２>,...)

@Description(desc="fht", author="hhh", age=11)
public String color(){
	return "red";
}


解析注解：
通过反射获取类，函数或成员上的运行时注解信息，从而实现动态控制程序运行时的逻辑

类解析：
Class class = Class.forName("com.test.child");
boolean isExist = class.isAnnotationPresent(Description.class);
if(isExist){
	Description d = class.getAnnotation(Description.class);
	System.out.println(d.value());
}

方法解析
Method[] ms = class.getMethods();
for(Method m: ms){
	boolean isExist = m.isAnnotation(Description.class);
	if(isExist){
		Description d = m.getAnnotation(Description.class);
		System.out.println(d.value());
	}
}



@Override 覆盖
@Deprecated 弃用

按照运行时划分：
源码注解－＞编译时注解－＞运行时注解
源码注解：　只在源码中存在，　编译成.class文件不存在
编译时注解：在源码和.class文件中存在，　像@Override/@Deprecated/@SuppressWarnings
运行时注解：在运行时还起作用，甚至影响运行逻辑的注解　@Autowired


OkHttp 
在OKHttp，每次网络请求就是一个Request，我们在Request里填写我们需要的url，header等其他参数，
再通过Request构造出Call，Call内部去请求服务器，得到回复，并将结果告诉调用者。同时okhttp提供了同步和异步两种方式进行网络操作

Get 请求
OkHttpClient client = new OkHttpClient();
//创建Request
Request request = new Request.Builder()
					.get()
					.url(url)
					.build();

通过client发起请求
client.newCall(request).enqueue(new Callback(){
	@Override
	public void onFailure(Call call , IOException e){

	}

	@Override
	public void onResponse(Call call, Response response) throws IOException{
		if(response.isSuccessful()){
			//String str = response.body().string();
		}
	}
})


Post
From　表单形式
	OkHttpClient client = new OkHttpClient();
	RequestBody body = new FormBody.Builder().add("usename", "xiaoyi").build();
	Request request = new Request.Builder()
						.post(body)
						.url(url)
						.build();
	client.newCall(request).enqueue(new Callback() { });

JSON 参数形式
	OkHttpClient client = new OkHttpClient();
	RequestBody body = RequestBody.create(MediaType.parse("application/json; charset=utf-8"), json);
	Request request = new Request.Builder()
						.post(body)
						.url(url)
						.build();
	client.newCall(request).enqueue(new Callback(){ });



BLE 

profile框架
每个attribute属性被UUID唯一标识，　UUID是标准128-bit格式的ID用来唯一标识信息，　
特征Characteristics　一个characteristics包含一个单独的value　和 多个用来描述characteristic值的descriptors，　一个characteristics可以被认为是一种类型，类似一个类

描述符descriptor　用来描述一个characteristic的值
服务service　是characteristic的集合



			|------>Name Title
			|
			|			
Profile------------>Service
			|
			|					|-------->Characteristic         |---->value[]
			|					|								 |
			|----->Service--------------->Characteristic ------------->Descriptor
								|								 |
								|-------->Characteristic         |---->Descriptor


通用属性规范GATT GATTProfile是一个 通用规范 用于在BLE链路 发送和接收 被称为属性attributes的数据片
蓝牙SIG定义了许多profile用于低功耗设备，　Profile是一个规范，　规范了设备如何工作在一个特定的应用场景；


主从通信透传模块
BLE 主透传协议模块,简称MTTM ,可以工作在透传模式TTM或者指令模式CM

MTTM上电后，　处于待机模式SBM,此时处于空闲状态, 无睡眠, 需要用户通过ＡＴ指令控制模块连接从设备, 在成功与从设备建立链接后，　MTTM会自动查找从设备的透传通道，
如果从设备属于ble从透传协议模块(简称STTM), MTTM默认进入透传模式, 否则默认进入指令模式

透传模式下，　用户ＣＰＵ可以通过模块的通用串口与ＳＴＴＭ进行双向通讯，　从MTTM串口输入的数据转发到STTM，　并从STTM的串口输出; 从　从透传协议模块输入的数据将转发到
主透传协议模块，　并从主透传协议模块串口输出，从而实现透明传输功能


MCU <--tx rx-> MTTM      <----->  STTM <--tx rx--> MCU

透传中的数据格式也是profile　结构：
１，　profile　
	一个标准的通信协议，　存在从机中，　蓝牙组织规定了一些标准的profile，　列如　HID OVER GATT，　防丢器　,心率计等，　每个profile中包含多个ｓｅｒｖｉｃｅ，
	每个ｓｅｒｖｉｃｅ代表从机的一种能力
２，service
	可以理解为一个服务，　在ble从机中，　通过有多个服务，　例如电量信息服务，　系统信息服务等，　每个ｓｅｒｖｉｃｅ中包含多个characteristic特征值, 
	每个characteristic特征值才是ble通信的主题，　比如当前电量是80%, 所以会通过电量的charactic特征值存在从机的profile里，　这样主机就可以通过
	characteristic来读取这个数据
３，characteristic
	ble主从机的通信均是通过characteristic来实现, 可以理解为一个标签, 通过这个标签可以获取或者写入想要的内容
4, UUID
	统一识别码，　上面提到的service和characteristic，　都需要一个唯一的uuid来标识

每个从机都会有一个叫做profile的东西存在，不管是simpleprofile，还是标准的防丢器profile，　他们都是由一系列service组成，　然后每个service包含了多个characteristic, 主机和从机之间的通信，　均是通过characteristic实现

对称加密:指加密和解密使用相同的密钥的加密算法

AES加密 
aes为分组密码，　也就是把明文分为一组一组的，　每组长度相等，每次加密一组数据，　直到加密完整个明文．在aes标准规范中，　分组长度只能是128位，　每个分组１６个字节，　每个字节８位，　密钥长度使用１２８位，　１９２位或２５６位．



Hash算法:单向算法,用户可以通过hash算法对目标信息生成一段特定长度的唯一的hash值,却不能通过hash值重新获得目标信息

MD5算法 将任意长度的"字节串"变换成一个128bit的大整数,并且它是一个不可逆的字符串变换算法,也可以作为数字签名应用,广泛用于各种软件的密码认证和钥匙识别




WebView 是一个基于webkit引擎,展现web页面的控件

作用: 显示和渲染Web页面, 直接使用html文件作布局, 可以和javaScript交互调用

webview控件功能强大, 除了具有一般View的属性和设置外,还可以对url 请求, 页面加载,渲染.页面交互进行强大的处理


webview 常用方法

webview.onResume(); //激活webview为活跃状态, 能正常执行网页的响应

webview.onPause(); // 当页面失去焦点, 切到后台不可见状态,需要执行onPause

webview.pauseTimers(); //当应用程序被切到后台, 这个方法不仅仅针对当前的webview而是全局的应用程序的webview, 它会暂停所有webview的layout, parsing, javascripttimer.降低cpu功耗

webview.resumeTimers(); //恢复pauseTimers状态

//销毁webview
//在关闭了activity时, 如果webview的音乐或视频,还在播放, 就必须销毁webview, 但是webview调用destroy时, webview仍绑定在activity上, 这是由于自定义的webview构建时传入了该activity的context对象,因此需要先从容器中移除webview,然后在销毁webview.
rootlayout.removeView(webview);
webview.destroy();

webview.canGoBack();//是否可以后退
webview.goBack();// 后退网页

webview.canGoForward() //是否可以前进
webview.goForward();//前进网页

//以当前index为起点, 前进或后退到历史记录中指定的setps, 如果steps为负数,则为后退, 正数则为前进
webview.goBackOrForward(int steps);


android 系统Back键控制网页后退
在不做任何处理的前提下, 浏览网页时点击系统back键, 整个Browser会调用finish()结束自身
目标:点击返回,只要网页回退而不是退出浏览器
解决: 在activity处理Back键事件

public boolean onKeyDown(int keyCode, KeyEvent event){
	if(keycode == KEYCODE_BACK && mWebView.canGoBack()){
		mWebView.goBack(); //后退网页
		return true;
	}
	return super.onKeyDown(keycode, event);
}

清除缓存数据
//清除网页访问留下的缓存
//由于内核缓存是全局的, 因此这个方法不仅仅针对webview,而是针对整个应用程序
webview.clearCache(true);

//清除当前webview访问的历史记录
//只会把webview访问历史记录里的所有记录除了当前访问记录
webview.clearHistory();

//仅仅清除自动完成填充的表单数据, 并不会清除webview存储到本地的数据
webview.clearFormData();

常用类
1, WebSettings类   对webview进行配置和管理

1>使用 先添加网络访问权限
<uses-permission android:name="android.permission.INTERNET"/>

2>生成一个webview组件
WebView webview = new WebView(this) //直接在activity生成

//在layout添加
Webview webview = findViewById(R.id.webview);
3>配置, 利用websettings子类
//声明websettings子类
WebSettings websettings = webview.getSettings();
//如果访问的页面要与js交互, 则webview 必须支持js
websettings.setJavaScriptEnabled(true);

//支持插件
websettings.setPluginsEnabled(true);

//设置自适应屏幕, 两者合用
websettings.setUseWideViewPort(true); //将图片调整到合适webview的大小
websettings.setLoadWithOverviewMode(true);//缩放至屏幕的大小

//缩放操作
websettings.setSupportZoom(true);//支持缩放, 是下面配置的前提
websettings.setBuiltInZoomControls(true); //设置内置的缩放控件
websettings.setDisplayZoomControls(false); //隐藏原生的缩放控件

//其他细节操作
websettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview 中缓存
websettings.setAllowFileAccess(true); //设置可以访问文件
websettings.setJavaScriptCanOpenWindowsAutomatically(true);//支持通过js打开新窗口
websettings.setLoadsImagesAutomatically(true);//支持自动加载图片
websettings.setDefaultTextEncodingName("utf-8");//设置编码格式



设置webview缓存
当加载html页面时, webview会在/data/data/包名目录下生成database与cache两个文件夹, 请求的url记录保存在webviewcache.db,而url的内容是保存在webviewcache文件夹下
//优先使用缓存
webview.getSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);

//缓存模式如下:
//LOAD_CACHE_ONLY:不使用网络, 只读取本地缓存数据
//LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据
//LOAD_NO_CACHE: 不使用缓存, 只从网络获取数据
//LOAD_CACHE_ELSE_NETWORK :只要本地有, 无论是否过期, 或者no-cache, 都使用缓存中的数据

离线加载

if(NetStatusUtil.isConnected(getApplicationContext())){
	websettings.setCacheMode(WebSettings.LOAD_DEFAULT);//根据cac-control决定是否从网络上取数据
}else{
	websettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);//没网, 从本地获取, 即离线加载
}

websettings.setDomStorageEnabled(true); //开启Dom storage API 功能
websettings.setDatabaseEnabled(true);//开启database storage api 功能
websettings.setAppCacheEnabled(true); //开启application caches 功能

String cacheDirPath = getFilesDir().getAbsolutePath_APP_CACAHE_DIRNAME;
websettings.setAppCachePath(cacheDirPath); //设置Application caches 缓存目录  , 此方法只能调用一次



WebViewClient 类 处理各种通知 和 请求事件

shouldOverrideUrlLoading()
打开网页时不调用系统浏览器, 而是在本webview中显示, 在网页上的所有加载都经过这个方法, 这个函数可以做很多操作

WebView webview = findViewById(R.id.webview);

webview.loadUrl("http://www.baidu.com/");//加载网页

webview.loadUrl("file:///android_asset/test.html"); //加载apk包中的html页面

webview.loadUrl("content://com.android.htmlfileprovider/sdcard/test.html");//加载手机本地的html页面

复写shouldOverrideUrlLoading 方法, 使得打开网页不调用系统浏览器, 而是在本webview中显示
webview.setWebViewClient(new WebViewClient(){
	@Override
	public boolean shouldOverrideUrlLoading(WebView view, String url){
		view.loadUrl(url);
		return true;
	}
})

onPageStarted
开始载入页面调用, 可以设定一个loading的页面, 告诉用户程序在等待网络响应
webview.setWebViewClient(new WebViewClient(){
	@Override
	public void onPageStarted(WebView view, String url, Bitmap favicon){
		//设定加载开始的操作
	}
});


onPageFinished() 在页面加载结束时调用, 可以关闭loading条, 切换程序动作

webview.setWebViewClient(new WebViewClient(){
	@Override
	public void onPageFinished(WebView view, String url){
		//设定加载结束的操作
	}
});


onLoadResource() 在加载页面资源时会调用, 每一个资源的加载都会调用一次
webview.setWebViewClient(new WebViewClient(){
	@Override
	public boolean onLoadResource(WebView view, String url){
		//设定加载资源的操作
	}
});

onReceivedError() 加载页面的服务器出现错误时(404) 调用
1>写一个html文件, 用于出错时展示给用户看的提示页面
2>将该html文件放置到assets文件夹下
3>复写onReceiverdError方法
webview.setWebViewClient(new WebViewClient(){
	@Override
	public void onReceivedError(WebView view, int errorCode, String description, String failingUrl){
		switch(errorCode){
			case HttpStatus.SC_NOT_FOUND:
				view.loadUrl("file:///android_assets/error_handler.html");
				break;
		}
	}
});

onReceivedSslError webview 默认不处理https请求需要设置如下

webview.setWebViewClient(new WebViewClient(){
	@Override
	public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error){
		handler.proceed(); //表示等待证书响应
	}
});

WebChromeClient 类 辅助webview处理javascript的对话框,网站图标, 网站标题等

onProgressChanged 获得网页加载进度并显示
webview.setWebChromeClient(new WebChromeClient(){
	@Override
	public void onProgressChanged(WebView view, int newProgress){
		if(newProgress < 100){
			String progress = newProgress+ "%";
			progress.setText(progress);
		}
	}
});

onReceivedTitle() 获取web页中的标题
webview.setWebChromeClient(new WebChromeClient(){
	@Override
	public void onReceivedTitle(WebView view, String title){
		titleview.setText(title);
	}
});


Android 与js的交互 通过webview互相调用,实际上是Android去调用js的代码, js去调用Android的代码,webview就是之间的桥梁

android 调用js 代码2种方法
1> 通过webview的loadUrl()
2> 通过webview的evaluateJavascript()

js调用android代码的方法3种
1>通过webview的addJavascriptInterface()进行对象映射
2>通过webviewclient的shouldOverrideUrlLoading()方法回调拦截url
3>通过webChromeClient的onJsAlert(), onJsConfirm(), onJsPrompt()方法回调拦截js对话框alert(), confirm(), prompt()消息


js代码调用一定要在onPageFinished回调之后才能调用, 否则不会调用

实例:

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Carson_Ho</title>
    //js 代码
    <script>
            //android 需要调用的方法
            function callJs(){
                alert("Android 调用了js的calljs方法");
            }
        </script>
</head>
</html>

//先载入js代码
mWebView.loadUrl("file:///android_asset/javascript.html");

//调用JavaScript的callJs方法,
mWebView.loadUrl("javascript:callJs()");

 //监听alert回调
 @Override
 public boolean onJsAlert(WebView view, String url, String message, final JsResult result) {
    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
    builder.setTitle("Alert")
    .setMessage(message)
    .setPositiveButton("ok", new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialogInterface, int i) {
            result.confirm();
        }
    });
    builder.setCancelable(false);
    builder.create().show();
    return true;

}

通过evaluateJavascript 该方法比loadurl方法效率更高, 使用更简洁
该方法执行不会使页面刷新, loadurl会, Android4.4 才能使用

使用:
将loadurl换成该方法即可
//API >=19
mWebView.evaluateJavascript("javascript:callJs()", new ValueCallback<String>() {
    @Override
    public void onReceiveValue(String s) {
        //此处为js返回的结果
        Log.i(TAG, " onReceiveValue s="+s);
    }
});






如何避免webview内存泄露?
1>不在xml中定义webview, 而是在需要的时候在activity中创建, 并且context使用getApplicationContext()
LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);

mWebView = new WebView(getApplicationContext());
mWebView.setLayoutParams(params);
mLayout.addView(mWebView);

2>在activity销毁的时候,先让webview加载null内容, 然后移除webview,再销毁webview, 最后置空

protected void onDestroy(){
	if(mWebView != null){
		mWebView.loadDataWithBaseURL(null, "", "text/html", "utf-8", null);
		mWebView.clearHistory();

		((ViewGroup)mWebView.getParent()).removeView(mWebView);
		mWebView.destroy();
		mWebView = null;
	}
	super.onDestroy();
}

webview使用漏洞:
1,任意代码执行漏洞
2,密码明文存储漏洞
3,域控制不严格漏洞

一, 任意代码执行漏洞
出现该漏洞的原因有三个:addJavascriptInterface()接口, webview 内置导出的searchBoxJavaBridge对象, webview内置导出的accessibility和accessibilityTraversal Object对象

webview.addJavascriptInterface(new JSObject(), "test");
通过映射将Android的本地对象和js的对象进行关联, 从而实现js调用Android的对象和方法
所以, 当js拿到Android对象后, 就可以调用对象中的所有方法,包括系统类, 从而进行任意代码执行

webview存在什么性能问题?
	webview里H5页面加载速度慢
	耗费流量

1.1.1 渲染速度慢
	js解析效率低, 由于js本身的解析过程复杂,解析速度不快,前端页面涉及较多js代码文件, 所以叠加起来导致js解析效率低
	手机硬件设备性能
1.1.2 页面资源加载缓慢
	H5页面从服务器获得, 并存储在Android手机里:
	H5页面一般会比较多, 每加载一个H5页面都会产生很多的网络请求,请求增多,导致页面资源加载缓慢

1.2 耗费流量,请求增多, 加载的较多, 从网络上下载的就多了

2.1 前端H5的缓存机制
	1, h5页面加载后存储在缓存区域, 在无网络连接时也可以访问
	2,webview 本质= 在Android中嵌入H5页面, 所以, android webview自带的缓存机制其实就是h5页面的缓存机制
	3,android webview 除了新的File System缓存机制还不支持,其他都支持

2.1.1 缓存机制有5种:
	1, 浏览器 缓存机制
	2, Application Cache 缓存机制
	3, Dom Storage 缓存机制
	4, Web SQL Database 缓存机制
	5, Indexed Database 缓存机制
	6, File System 缓存机制

1,浏览器缓存机制, 原理 根据HTTP协议头里的Cache-Control和Last-Modified等字段来控制文件缓存的机制
	1>Cache-Control:用于控制文件在本地缓存有效时长
		例:Cache-Control:max-age=600,表示文件在本地缓存时长是600秒, 在600s内,如果还有请求这个资源,浏览器不会发出HTTP请求, 直接使用本地缓存文件
	2>Expires:与cache-control一样,控制缓存时效, Expires是HTTP1.0标准中的字段,cache-control是http1.1标准中新加的字段,同时出现时cache-control优先级高
	3,Last-Modified:标识文件在服务器上的最新更新时间
	下次请求时, 如果文件缓存过期, 浏览器通过If-Modified-Since字段带上这个时间, 发送给服务器,由服务器比较时间戳来判断文件是否有修改,如果没有修改,
	服务器返回304告诉浏览器继续使用缓存;如果有修改,则返回200,同时返回最新的文件
	4,Etag:同上Last-Modified

常用方法:Cache-Con与Last-Modified一起使用; Expires与Etag一起使用
浏览器缓存机制是浏览器内核的机制,kk之后浏览器内核是Chrome, 一般是标准实现

2,Application Cache
以文件为单位进行缓存,且文件有一定更新机制,AppCache原理有两个关键点:manifest属性和manifest文件

<!DOCTYPE html>
<html manifest="demo_html.appcache">
// HTML 在头中通过 manifest 属性引用 manifest 文件
// manifest 文件：就是上面以 appcache 结尾的文件，是一个普通文件文件，列出了需要缓存的文件
// 浏览器在首次加载 HTML 文件时，会解析 manifest 属性，并读取 manifest 文件，获取 Section：CACHE MANIFEST 下要缓存的文件列表，再对文件缓存
<body>
...
</body>
</html>

// 原理说明如下：
// AppCache 在首次加载生成后，也有更新机制。被缓存的文件如果要更新，需要更新 manifest 文件
// 因为浏览器在下次加载时，除了会默认使用缓存外，还会在后台检查 manifest 文件有没有修改（byte by byte)
发现有修改，就会重新获取 manifest 文件，对 Section：CACHE MANIFEST 下文件列表检查更新
// manifest 文件与缓存文件的检查更新也遵守浏览器缓存机制
// 如用户手动清了 AppCache 缓存，下次加载时，浏览器会重新生成缓存，也可算是一种缓存的更新
// AppCache 的缓存文件，与浏览器的缓存文件分开存储的，因为 AppCache 在本地有 5MB（分 HOST）的空间限制

具体设置:
WebSettings settings = webview.getSettings();

String cacheDirPath=context.getFilesDir().getAbsolutePath()+"cache/";
settings.setAppCachePath(cacheDirPath); //设置缓存路径

settings.setAppCacheMaxSize(20*1024*1024); //设置缓存大小 ,每个Application只调用一次

settings.setAppCacheEnabled(true); //开启Application Cache存储机制


3,Dom Storage 缓存机制
原理: 通过存储字符串的key-value对来提供
Dom Storage分为sessionStorage & localStorage, 使用方法基本相同, 区别在于作用范围不同
sessionStroage:具备临时性, 存储与页面相关的数据,在页面关闭后无法使用
localStorage:具备持久性,保存的数据在页面关闭后也可以使用

应用场景:存储临时,简单的数据
	1,代替将不需要让服务器知道的信息存储到cookies的这种传统方法
	2,Dom Storage 机制类似于Android的SharedPreference机制

具体实现:
	websettings.setDomStorageEnabled(true); //开启Dom storage


4,Web SQL Database 缓存机制
原理:基于SQL的数据库存储机制
特点:充分利用数据库的优势,方便对数据进行增删改查
应用场景:存储适合数据库的结构化数据
实现:

String cacheDirPath = context.getFileDir().getAbsolutePath()+"cache/";
websettings.setDatabasePath(cacheDirPath); //设置缓存路径

websettings.setDatabaseEnabled(true); //开启 数据库存储机制

根据官方说明, 这种存储机制不在推荐使用. 取而代之的是indexdDB 缓存

5, IndexedDB 缓存机制
	属于NoSQL数据库,通过存储字符串的key-value对来提供
应用场景:存储复杂,数据量大的结构化数据
具体实现:
	websettings.setJavaScriptEnabled(true);
	//设置支持JS就自动打开IndexedDB存储机制

重写webViewClient的shouldInterceptRequest方法,当像服务器访问这些静态资源时进行拦截,检测到是相同的资源则用本地资源代替
// 假设现在需要拦截一个图片的资源并用本地资源进行替代

        mWebview.setWebViewClient(new WebViewClient() {
            // 重写 WebViewClient  的  shouldInterceptRequest （）
            // API 21 以下用shouldInterceptRequest(WebView view, String url)
            // API 21 以上用shouldInterceptRequest(WebView view, WebResourceRequest request)
            // 下面会详细说明

             // API 21 以下用shouldInterceptRequest(WebView view, String url)
            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, String url) {

                // 步骤1:判断拦截资源的条件，即判断url里的图片资源的文件名
                if (url.contains("logo.gif")) {
                // 假设网页里该图片资源的地址为：http://abc.com/imgage/logo.gif
                // 图片的资源文件名为:logo.gif

                    InputStream is = null;
                    // 步骤2:创建一个输入流

                    try {
                        is =getApplicationContext().getAssets().open("images/abc.png");
                        // 步骤3:获得需要替换的资源(存放在assets文件夹里)
                        // a. 先在app/src/main下创建一个assets文件夹
                        // b. 在assets文件夹里再创建一个images文件夹
                        // c. 在images文件夹放上需要替换的资源（此处替换的是abc.png图片）

                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    // 步骤4:替换资源
                    WebResourceResponse response = new WebResourceResponse("image/png",
                            "utf-8", is);
                    // 参数1：http请求里该图片的Content-Type,此处图片为image/png
                    // 参数2：编码类型
                    // 参数3：存放着替换资源的输入流（上面创建的那个）
                    return response;
                }

                return super.shouldInterceptRequest(view, url);
            }


           // API 21 以上用shouldInterceptRequest(WebView view, WebResourceRequest request)
            @TargetApi(Build.VERSION_CODES.LOLLIPOP)
            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {

               // 步骤1:判断拦截资源的条件，即判断url里的图片资源的文件名
                if (request.getUrl().toString().contains("logo.gif")) {
                // 假设网页里该图片资源的地址为：http://abc.com/imgage/logo.gif
                // 图片的资源文件名为:logo.gif

                    InputStream is = null;
                    // 步骤2:创建一个输入流

                    try {
                        is = getApplicationContext().getAssets().open("images/abc.png");
                         // 步骤3:获得需要替换的资源(存放在assets文件夹里)
                        // a. 先在app/src/main下创建一个assets文件夹
                        // b. 在assets文件夹里再创建一个images文件夹
                        // c. 在images文件夹放上需要替换的资源（此处替换的是abc.png图片

                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    // 步骤4:替换资源
                    WebResourceResponse response = new WebResourceResponse("image/png",
                            "utf-8", is);
                    // 参数1：http请求里该图片的Content-Type,此处图片为image/png
                    // 参数2：编码类型
                    // 参数3：存放着替换资源的输入流（上面创建的那个）
                    return response;
                }
                return super.shouldInterceptRequest(view, request);
            }

    });

}








Android 适配方案
屏幕尺寸:手机对角线的物理尺寸
屏幕分辨率:在横向上有a个像素点,在纵向上有b个像素点
单位px, 1px = 1像素点

屏幕像素密度 :每英寸的像素点数
单位:dpi

密度无关像素 : dp或dip,与终端上的实际物理像素点无关.
单位 dp,可以保证在不同的屏幕像素密度的设备上显示相同的效果

dp和px转换
在Android中规定以160dpi为基准,1dp = 1px

ldpi 240x320 120dpi 1dp=0.75px
mdpi 320x480 160dpi 1dp=1px
hdpi 480x800 240dpi 1dp=1.5px
xhdpi 720x1280 320dpi 1dp=2px
xxhdpi 1080x1920 480dpi 1dp=3px

独立比例像素 用于设置文字大小
单位:sp





Handler 
一套Android消息传递机制, 在多线程的应用场景中,将工作线程中需要更新UI的操作信息传递到UI线程,从而实现工作线程对UI的更新处理
是android系统为工作线程提供的一种可以与外界交互的接口.
Looper是线程内部负责实现消息循环的对象, 普通的Thread线程内部是没有这样的一个消息循环对象的, Android专门提供了HandlerThread封装这种带消息循环机制的线程

public class HandlerThread extends Thread {
	Looper mLooper;

@Override
    public void run() {
        mTid = Process.myTid();
        Looper.prepare();
        synchronized (this) {
            mLooper = Looper.myLooper();
            notifyAll();
        }   
        Process.setThreadPriority(mPriority);
        onLooperPrepared();
        Looper.loop();
        mTid = -1; 
    }   
}

Handler通过与线程的Looper对象绑定,完成与该Thread的绑定
默认情况下new Handler()的时候, 没有传入某个线程的Looper对象, 系统默认绑定创建Handler对象的线程;
那么在activity中创建和在Thread中创建的区别?
Activity默认工作在主线程,所以new Handler()后, handler对象默认绑定了主线程的Looper对象, 因此sendMessage消息发送给我主线程,而且通过传入的callback对象
得到handleMessage回调也是工作在主线程;同理,如果在自定义的线程中new Handler()则默认情况绑定该线程的Looper对象, 因此该sendMessage消息则是发送给了我这个线程, 而且handleMessage回调也是工作在这个线程,所以在这个非UI线程中handleMessage函数中不能处理UI更新的操作,否则发生ANR;

thread= new Thread(){
            @Override
            public void run() {
                super.run();
                Looper.prepare();

                handler=new Handler(){
                    @Override
                    public void handleMessage(Message msg) {
                        super.handleMessage(msg);
                        Log.i(TAG, "handleMessage: "+msg.toString());
                    }

                    @Override
                    public void dispatchMessage(Message msg) {
                        super.dispatchMessage(msg);
                        Log.i(TAG, "dispatchMessage: "+msg.toString());
                    }
                };
                Looper.loop();


            }
        };
 thread.start();
启动Looper,必然有退出Looper,怎么停止呢, 在API 18以前调用quit(), 之后调用quitSafely();

	public void quit() {                                                                                                                             
        mQueue.quit(false);
    }


  public void quitSafely() {                                                                                                                       
       mQueue.quit(true);
   }
最后调用MessageQueue的quit方法, 

void quit(boolean safe) {
        if (!mQuitAllowed) {
            throw new IllegalStateException("Main thread not allowed to quit.");
        }   

        synchronized (this) {
            if (mQuitting) {
                return;
            }   
            mQuitting = true;

            if (safe) {
                removeAllFutureMessagesLocked();
            } else {
                removeAllMessagesLocked();
            }   

            // We can assume mPtr != 0 because mQuitting was previously false.
            nativeWake(mPtr);                                                                                                                            
        }   
    }   

removeAllMessagesLocked()该方法是把消息池中的消息全部清空,removeAllFutureMessagesLocked()只清空了带有延迟消息的消息, 非延迟的全部派发出去,让handler处理,所以两者的区别,只是在调用的时候有需要处理完成的消息不容易被丢失;
但是只要调用了quit,就意味着把Looper关闭了, 消息循环截止,消息队列也拒绝接收handler发送过来的消息;



Synchronized
线程安全是并发编程的重要关注点, 造成线程安全问题的主要诱因有两点:
1>存在共享数据(也称临界资源)
2>存在多条线程共同操作共享数据
为了什么需要?为了解决当存在多个线程操作共享数据时,保证同一时刻只有一个线程在操作共享数据,其他线程等待该线程处理完数据后在进行,达到互斥访问的目的,故称为互斥锁

synchronized三种应用方式
1>修饰实例方法,作用于当前实例加锁,进入同步代码前要获得当前实例的锁
2>修饰静态方法,作用于当前类对象加锁,进入同步代码前要获得当前类对象的锁
3>修饰代码块, 指定加锁对象,对给定对象加锁,进入同步代码库前要获得给定对象的锁


synchronized作用于实例方法:
所谓的实例对象锁就是用synchronized修饰实例对象中的实例方法, 注意是实例方法不包括静态方法;
public synchronized void increase(){
	i++;
}

注意点,当一个线程正在访问一个对象的synchronied实例方法, 那么其他线程不能访问该对象的其他synchronize方法, 因为一个对象只有一把锁, 当一个线程获得该对象的锁之后, 其他线程无法获取该对象的锁,一个线程一把锁;


synchronized作用于静态方法:
当synchronize作用于静态方法时, 其锁就是当前类的class对象锁,由于静态成员不专属于任何一个实例对象,是类成员,因此通过class对象锁可以通知静态成员的并发操作,
注意点, 一个线程A调用一个实例对象非static synchronize方法, 线程B需要调用这个实例对象所属的静态synchronize方法,是允许的,因为访问静态synchronize方法占用的锁是当前类的class对象, 而访问非静态的占用的锁是当前实例对象锁
public static synchronized void increase(){
	i++;
}


synchronized同步代码块
在某些情况下,我们编写的方法体可能体积较大, 需要同步的代码只有一小部分, 此时我们就可以使用同步代码块对需要同步的代码进行包裹;

public void run(){
	synchronized(instance){
		i++;
	}
}

当前实例对象就是锁对象, 每次当线程进入synchronized包裹的代码块时就会要求当前线程持有instance实例对象锁,如果当前有其他线程正持有该对象锁,那么新的线程就必须等待,
这样就保证了每次只有一个线程执行操作;也可以这样写:
synchronized(this){ //this, 当前实例对象锁
	i++
}

synchronized(AccountingSync.class){ //class对象锁
	i++;
}


原理:
java虚拟机中的同步基于进入和退出管程对象实现,在java语言中,同步用的最多的地方可能是被synchronized修饰的同步方法.
在JVM中对象在内存中的布局分为三块区域, 对象头, 实例数据和对齐填充


实例变量:存放类的属性数据信息,包括父类的属性信息
填充数据:由于虚拟机要求对象起始地址必须是8字节的整数倍,填充数据不是必须存在的,仅仅是为了字节对齐

java头对象:它实现synchronize的锁对象的基础,一般而言,synchronize使用的锁对象是存储在java对象头里的, jvm中采用2个字来存储对象头(如果对象是数组则分配3个字,多出来1个字记录数组长度),其主要结构是有Mark Word 和Class Metadata Address组成
Mark Word :存储对象的hashCode,锁信息或分代年龄或GC标志等信息
Class Metadata Address: 类型指针指向对象的类元数据,JVM通过这个指针确定该对象是哪个类的实例

synchronize字节码代码:

3: monitorenter  //进入同步方法
//..........省略其他  
15: monitorexit   //退出同步方法
16: goto          24
//省略其他.......
21: monitorexit //退出同步方法

从字节码可知同步语句块的实现使用的是monitorenter和monitorexit指令,monitorenter指令指向同步代码块的开始位置,monitorexit指令则指明结束位置


synchronized 可重入性
从上面讲到的来说,当一个线程试图操作一个由其他线程持有的对象锁的临界资源时, 将会处于阻塞状态,但是当一个线程再次请求自己持有的对象锁的临界资源时, 这种情况属于重入锁,请求将会成功;在java中synchronize是基于原子性的内部锁机制,是可重入的,例:


public void run(){
	//this, 当前实例对象锁
	synchronized(this){
		i++;
		increase)(); // 可重入性
	}
}

public synchronized void increase(){
	j++;
}


等待唤醒机制与synchronized
等待唤醒机制主要指notify/notifyAll/wait方法,使用这三个方法时,必须处于synchronized代码块或者方法中,否则抛出IllegalMonitorStateExcepion异常,
synchronized (obj) {
       obj.wait();
       obj.notify();
       obj.notifyAll();         
 }

需要特别理解的一点是，与sleep方法不同的是wait方法调用完成后，线程将被暂停，但wait方法将会释放当前持有的监视器锁(monitor)，直到有线程调用notify/notifyAll方法后方能继续执行，而sleep方法只让线程休眠并不释放锁。同时notify/notifyAll方法调用后，并不会马上释放监视器锁，而是在相应的synchronized(){}/synchronized方法执行结束后才自动释放锁。

SQLite 事务
事务是一个对数据库执行工作单元.事务是以逻辑顺序完成的工作单位或序列,可以由用户手动操作完成,也可以是由某种数据库程序自动完成
事务的属性:原子性,一致性,隔离性,持久性



自定义View
大部分需要重写onMeasure(), onDraw();
onMeasure 负责对当前View的尺寸进行测量
onDraw 负责把当前这个view绘制出来


package com.example.fht.webviewtest;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;

/**
 * Created by fht on 5/16/18.
 */

public class CircleView extends View {
    String TAG = "yjj";
    Paint mPaint;
    int mColor;

    public CircleView(Context context) {
        super(context);
        init();
    }

    public CircleView(Context context, @Nullable AttributeSet attrs) {
        this(context, attrs, 0);
        init();
    }

    public CircleView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        
        //读取自定义属性
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);
        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);
        a.recycle();

        init();
    }


    private void init(){
        mPaint = new Paint();
        mPaint.setColor(mColor);
        mPaint.setStrokeWidth(10f);
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setAlpha(235);
    }



    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        Log.i(TAG, "onMeasure");

        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);

        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        int defaultHight = 400;
        int defaultWidth = 400;

        if (getLayoutParams().width == ViewGroup.LayoutParams.WRAP_CONTENT &&
                getLayoutParams().height == ViewGroup.LayoutParams.WRAP_CONTENT){
            setMeasuredDimension(defaultWidth, defaultHight);
        }else if (getLayoutParams().width == ViewGroup.LayoutParams.WRAP_CONTENT){
            setMeasuredDimension(defaultWidth, heightSize);
        }else if (getLayoutParams().height == ViewGroup.LayoutParams.WRAP_CONTENT){
            setMeasuredDimension(widthSize, defaultHight);
        }


    }


    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        Log.i(TAG, "onDraw");
        int paddingLeft = getPaddingLeft();
        int paddingRight = getPaddingRight();
        int paddingTop = getPaddingTop();
        int paddingBottom = getPaddingBottom();


        int width = getWidth()-paddingLeft-paddingRight;
        int height = getHeight()-paddingTop-paddingBottom;

        int r = Math.min(width,height)/2;

        canvas.drawCircle(paddingLeft+width/2, paddingTop+height/2, r, mPaint);
    }


    @Override
    public boolean onTouchEvent(MotionEvent event) {
        Log.i(TAG, "onTouchEvent ");
        return super.onTouchEvent(event);
    }


    @Override
    public boolean dispatchTouchEvent(MotionEvent event) {
        Log.i(TAG, "event = "+event.getAction());
        return super.dispatchTouchEvent(event);
    }

}

自定义属性
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="CircleView">
        <attr name="circle_color" format="color"/>
    </declare-styleable>
</resources>




事件分发机制

对于viewGroup类型的控件有如下三种

事件分发 dispatchTouchEvent
事件拦截 onInterceptTouchEvent
事件响应 onTouchEvent

,对于单个view控件只有dispatchTouchEvent和onTouchEvent


viewgroup A    	dispatchTouchEvent
						|
				onInterceptTouchEvent
						|
					  返回值 ----true-> onTouchEvent
					  	|					|
					  	|					|
					  false					|
					  	|					|
					  	|					|
					  					  false	
viewgroup B 	dispatchTouchEvent			|
						|					|
				onInterceptTouchEvent		|
						|					|
						|					|
					  返回值 ----true-->onTouchEvent ---true-> 代表事件消费了,事件结束
					    |
					    |
					  false
					    |
					    |
View 			dispatchTouchEvent
						|
					onTouchEvent


事件冲突典型案例 viewpager 和scrollview ,需要在viewpager中的onInterceptTouchEvent 判断左右滑动, 还是上下滑动, 如果是左右滑动,返回 return true将事件拦截下来, 如果是上下滑动,返回return false,将事件传递给scrollview.



匿名共享内存
共享内存顾名思义就是申请一块空间,可以多个进程使用
先介绍下Linux的共享内存
int shmget(key_t key, size_t size, int shmflg);该函数用来创建共享内存
void *shmat(int shm_id, const void *shm_addr, int shmflg);要想访问共享内存,必须将其映射到当前进程的地址空间
其中key_t是共享内存的唯一标识,可以说,Linux的共享内存其实是有名共享内存,名字就是key;
用法






jsoup html文档解析器
jsoup可以从包括字符串,url地址以及本地文件来加载HTML文档,并生成Document对象实例

示例:
1> 直接从字符串中输入html文档
String html = "<html><head><title> 开源中国社区</title></head>"+"<body><p>这里是jsoup项目的相关文章</p></body></html>";
Document doc = Jsoup.parse(html);

2>从URL直接加载HTML文档
Document doc = Jsoup.connect("http://www.oschina.net/").get();
String title = doc.title();

3>从文件中加载HTML文档
File input = new File("D:/test.html");
Document doc = Jsoup.parse(input, "UTF-8", "http://www.oschina.net/");

也可以像DOM方式的解析
Element content = doc.getElementById("content");
Elements links = content.getElementsByTag("a");
for(Element link : links){
	String linkHref = link.attr("href");
	String linkText = link.text();
}

元素检索

Elements links = doc.select("a[href]"); //具有href属性的链接
Elements pngs = doc.select("img[src$=.png"); //所有引用png图片的元素

Element masthead = doc.select("div.masthead").first(); //找出定义了class=masthead的元素

修改数据

doc.select("div.comments a").attr("rel", "nofollow"); //为所有链接增加rel=nofollow属性
doc.select("div.comments a").addClass("mylinkclass");//为所有链接增加class=mylinkclass属性
doc.select("img").removeAttr("onclick"); //删除所有图片的onclick属性
doc.select("input[type=text]").val("");//清空所有文本输入框中的文本

